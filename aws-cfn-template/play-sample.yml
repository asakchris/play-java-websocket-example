AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates all required resources for sample play application
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC in which Fargate tasks run
  LbSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets in given VPC to deploy ALB
  PrivateSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two private subnets in given VPC where Fargate run tasks
  EcsClusterStackName:
    Type: String
    Description: Name of the stack used to create ECS Cluster
  RoleStackName:
    Type: String
    Description: Name of the stack used to create IAM roles required for ECS
Resources:
  # A security group for web containers that runs in Fargate. Allowing network traffic from a public facing load
  # balancer, and from other members of the security group.
  WebFargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'PLAY-WEB-CONTAINER-SG'
      GroupDescription: Access to the Fargate containers for web
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub 'PLAY-WEB-CONTAINER-SG'
  WebSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'WebFargateContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 9000
      ToPort: 9000
      SourceSecurityGroupId: !Ref 'WebLoadBalancerSG'
  WebSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'WebFargateContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 9000
      ToPort: 9000
      SourceSecurityGroupId: !Ref 'WebFargateContainerSecurityGroup'

  # Web Load balancer security group
  WebLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'PLAY-WEB-LB-SG'
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: Allow HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: '::/0'
          Description: Allow HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: Allow HTTPS
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: '::/0'
          Description: Allow HTTPS
      Tags:
      - Key: Name
        Value: 'PLAY-WEB-LB-SG'

  # Load balancers for getting traffic to containers.
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 'PLAY-WEB-ALB'
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      Subnets: !Ref LbSubnetList
      SecurityGroups: [!Ref 'WebLoadBalancerSG']
      Tags:
      - Key: Name
        Value: 'PLAY-WEB-ALB'
  # This group is used to setup the ALB to just drop traffic initially,
  # before any real service target groups have been added.
  WebLoadBalancerDummyTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'PLAY-WEB-DUMMY-TG'
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: 'PLAY-WEB-DUMMY-TG'
  WebLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - WebLoadBalancer
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref 'WebLoadBalancerDummyTG'
        Type: 'forward'
      LoadBalancerArn: !Ref 'WebLoadBalancer'
      Port: 80
      Protocol: HTTP
  # This is used for keeping track of all the tasks, and what IP addresses / port numbers they have.
  # We can query it, to use the addresses, but most often this target group is just connected to an
  # application load balancer, or network load balancer,
  # so it can automatically distribute traffic across all the targets.
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'PLAY-WEB-TG'
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 9000
      Protocol: HTTP
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: 'PLAY-WEB-TG'
  # Create a rule on the load balancer for routing traffic to the target group
  WebLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'WebTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: ['*']
      ListenerArn: !Ref WebLoadBalancerListener
      Priority: 1

  # Cloud watch log group to which container send logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/ECS/PLAY/SAMPLE'
      RetentionInDays: 7

  # The task definition. This is a simple metadata description of what container to run,
  # and what resource requirements it has.
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'PLAY-SAMPLE-TD'
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'RoleStackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'RoleStackName', 'ECSTaskRole']]
      ContainerDefinitions:
      - Name: 'PLAY-SAMPLE-CONTAINER'
        Cpu: '256'
        Memory: '512'
        Image: asakchris/play-java-websocket-example:latest
        PortMappings:
        - ContainerPort: 9000
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs

  # Service is a resource which allows to run multiple copies of a type of task, and gather up their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: WebLoadBalancerRule
    Properties:
      ServiceName: 'PLAY-SAMPLE-SERVICE'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'EcsClusterStackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref WebFargateContainerSecurityGroup
          Subnets: !Ref PrivateSubnetList
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
      - ContainerName: 'PLAY-SAMPLE-CONTAINER'
        ContainerPort: 9000
        TargetGroupArn: !Ref WebTargetGroup
